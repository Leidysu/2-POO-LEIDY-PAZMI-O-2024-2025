
# Sistema de gestión de una tienda en línea

# Clase Producto
class Producto:
    def __init__(self, nombre, precio, stock):
        """
        Inicializa un producto con nombre, precio y stock disponible.
        :param nombre: Nombre del producto.
        :param precio: Precio del producto.
        :param stock: Cantidad en inventario.
        """
        self.nombre = nombre
        self.precio = precio
        self.stock = stock

    def actualizar_stock(self, cantidad):
        """
        Actualiza el stock del producto.
        :param cantidad: Cantidad a restar del stock.
        """
        if cantidad <= self.stock:
            self.stock -= cantidad
        else:
            raise ValueError(f"Stock insuficiente para {self.nombre}")

# Clase Cliente
class Cliente:
    def __init__(self, nombre, email):
        """
        Inicializa un cliente con su nombre y correo electrónico.
        :param nombre: Nombre del cliente.
        :param email: Correo del cliente.
        """
        self.nombre = nombre
        self.email = email

# Clase CarritoDeCompras
class CarritoDeCompras:
    def __init__(self):
        """
        Inicializa un carrito de compras vacío.
        """
        self.items = []

    def agregar_producto(self, producto, cantidad):
        """
        Agrega un producto al carrito.
        :param producto: Instancia de la clase Producto.
        :param cantidad: Cantidad del producto a agregar.
        """
        if cantidad > producto.stock:
            raise ValueError(f"No hay suficiente stock para {producto.nombre}")
        self.items.append((producto, cantidad))
        producto.actualizar_stock(cantidad)

    def calcular_total(self):
        """
        Calcula el costo total de los productos en el carrito.
        :return: Total en valor monetario.
        """
        return sum(producto.precio * cantidad for producto, cantidad in self.items)

    def generar_factura(self, cliente):
        """
        Genera una factura con el detalle de los productos, cantidades y el total.
        :param cliente: Instancia de la clase Cliente.
        """
        print(f"Factura para: {cliente.nombre} ({cliente.email})")
        print("-" * 40)
        for producto, cantidad in self.items:
            print(f"{producto.nombre} (x{cantidad}): ${producto.precio * cantidad:.2f}")
        print("-" * 40)
        print(f"Total: ${self.calcular_total():.2f}")

# Ejemplo de uso
def main():
    # Crear productos
    producto1 = Producto("Laptop", 1200.00, 5)
    producto2 = Producto("Mouse", 25.00, 10)

    # Crear cliente
    cliente = Cliente("María López", "maria.lopez@example.com")

    # Crear carrito de compras
    carrito = CarritoDeCompras()

    # Agregar productos al carrito
    try:
        carrito.agregar_producto(producto1, 1)  # 1 Laptop
        carrito.agregar_producto(producto2, 2)  # 2 Mouse
    except ValueError as e:
        print(e)

    # Generar factura
    carrito.generar_factura(cliente)

if __name__ == "__main__":
    main()


    # Sistema de reservas para un hotel

    # Clase Habitacion
    class Habitacion:
        def __init__(self, numero, tipo, precio, disponible=True):
            """
            Inicializa una habitación con número, tipo, precio y disponibilidad.
            :param numero: Número de la habitación.
            :param tipo: Tipo de habitación (Ej: "Individual", "Doble").
            :param precio: Precio por noche.
            :param disponible: Estado de disponibilidad (por defecto True).
            """
            self.numero = numero
            self.tipo = tipo
            self.precio = precio
            self.disponible = disponible

        def reservar(self):
            """
            Marca la habitación como no disponible.
            """
            if self.disponible:
                self.disponible = False
            else:
                raise ValueError(f"La habitación {self.numero} ya está reservada.")

        def liberar(self):
            """
            Marca la habitación como disponible.
            """
            self.disponible = True


    # Clase Cliente
    class Cliente:
        def __init__(self, nombre, identificacion):
            """
            Inicializa un cliente con nombre e identificación.
            :param nombre: Nombre completo del cliente.
            :param identificacion: Identificación única del cliente (Ej: Cédula o Pasaporte).
            """
            self.nombre = nombre
            self.identificacion = identificacion


    # Clase Reserva
    class Reserva:
        def __init__(self, cliente, habitacion, noches):
            """
            Crea una reserva asociando un cliente y una habitación por un número de noches.
            :param cliente: Instancia de la clase Cliente.
            :param habitacion: Instancia de la clase Habitacion.
            :param noches: Número de noches a reservar.
            """
            if not habitacion.disponible:
                raise ValueError(f"La habitación {habitacion.numero} no está disponible.")

            self.cliente = cliente
            self.habitacion = habitacion
            self.noches = noches
            self.costo_total = noches * habitacion.precio
            habitacion.reservar()

        def cancelar_reserva(self):
            """
            Cancela la reserva y libera la habitación.
            """
            self.habitacion.liberar()
            print(f"Reserva cancelada para la habitación {self.habitacion.numero}.")

        def mostrar_resumen(self):
            """
            Muestra un resumen de la reserva.
            """
            print("-" * 40)
            print(f"Cliente: {self.cliente.nombre} (ID: {self.cliente.identificacion})")
            print(f"Habitación: {self.habitacion.numero} ({self.habitacion.tipo})")
            print(f"Noches: {self.noches}")
            print(f"Costo Total: ${self.costo_total:.2f}")
            print("-" * 40)


    # Ejemplo de uso
    def main():
        # Crear habitaciones
        habitacion1 = Habitacion(101, "Individual", 50.00)
        habitacion2 = Habitacion(102, "Doble", 80.00)

        # Crear cliente
        cliente = Cliente("Juan Pérez", "1728394560")

        # Crear reserva
        try:
            reserva = Reserva(cliente, habitacion1, 3)  # Reserva de 3 noches
            reserva.mostrar_resumen()

            # Cancelar reserva
            reserva.cancelar_reserva()

        except ValueError as e:
            print(e)


    if __name__ == "__main__":
        main()
